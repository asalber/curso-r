{
  "hash": "bbb759d86ef3721f5f79f243fc1de8ac",
  "result": {
    "markdown": "---\nlang: es\n---\n\n\n\n# Tipos de datos estructurados\n\nLos tipos estructurados de datos, a diferencia de los simples, son colecciones de datos con una determinada estructura. En R existen varios tipos tipos estructurados de datos que pueden clasificarse de acuerdo a su dimensión y a si son homogéneos (todos sus elementos son del mismo tipo) o heterogéneos. \n\n| Dimensiones | Homogéneos | Heterogéneos |\n|:-:|:-:|:-:|\n| 1 | Vector | Lista |\n| 2 | Matriz | Data frame |\n| n | Array | |\n\nPara averiguar la estructura de un dato estructurado se puede utilizar la función siguiente: \n\n- `str(x)`: Devuelve una cadena de texto con la estructura de `x` en un formato amigable para las personas.\n\n## Vectores\n\nEl vector es el tipo de dato estructurado más básicos en R. Un vector es una colección ordenada de elementos del mismo tipo. \n\n### Creación de vectores\n\nPara construir un vector se utiliza la función de combinación `c()`:\n\n- `c(x1, x2, ...)`: Devuelve el vector formado por los elementos `x1`, `x2`, etc.\n\nTambién es posible utilizar el operador `:` para generar un vector de números enteros consecutivos:\n\n- `x:y`: Devuelve el vector de números enteros consecutivos desde `x` hasta `y`.\n\n:::{#exm-construccion-vectores}\nA continuación se muestran varios ejemplos de construcción de vectores.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-1_5a4f3c38f34acc5f0df7bf8b7df027ec'}\n\n```{.r .cell-code}\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nc(\"uno\", \"dos\", \"tres\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"uno\"  \"dos\"  \"tres\"\n```\n:::\n\n```{.r .cell-code}\n# Vector vacío\nc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\n# Vector con elementos perdidos\nc(1, NA, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 NA  3\n```\n:::\n\n```{.r .cell-code}\n# Vector de números enteros consecutivos del 2 al 6\n2:6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6\n```\n:::\n:::\n\n\n:::\n\n#### Vectores con nombres\n\nEs posible asignar un nombre a cada elemento de un vector. Los nombres son etiquetas de texto que se asocian a cada elemento. Para asociar un nombre a un elemento se utiliza la sintaxis `nombre = valor`, donde `nombre` es una cadena de caracteres y `valor` es el elemento del vector.\n\n:::{#exm-vectores-con-nombre}\nA continuación se muestra un ejemplo de creación de un vector con nombres.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-2_324e60e225fcacde6d0f2de29b50f6d1'}\n\n```{.r .cell-code}\nc(\"Matemáticas\" = 8.2, \"Física\" = 6.5, \"Economía\" = 4.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatemáticas      Física    Economía \n        8.2         6.5         4.5 \n```\n:::\n:::\n\n\n:::\n\nPara acceder a los nombres de un vector se utiliza la siguiente función:\n\n- `names(x)`: Devuelve un vector de cadenas de caracteres con los nombres de los elementos del vector `x`.\n\n:::{#exm-acceso-nombres-vector}\nA continuación se muestra un ejemplo de acceso a los nombres de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-3_b90e6d2a5787042d8b3247c08e51eda6'}\n\n```{.r .cell-code}\nnotas <- c(\"Matemáticas\" = 8.2, \"Física\" = 6.5, \"Economía\" = 4.5)\nnames(notas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Matemáticas\" \"Física\"      \"Economía\"   \n```\n:::\n:::\n\n\n:::\n\n### Tamaño de un vector\n\nEl número de elementos de un vector es su _tamaño_ y puede averiguarse con la siguiente función.\n\n- `lenght(x)`: Devuelve el número de elementos del vector `x`.\n\n:::{#exm-tamaño-vector}\nA continuación se muestran varios ejemplos de la obtención del tamaño de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-4_041f18267ff62c168cdccb2a405ed7d7'}\n\n```{.r .cell-code}\nlength(c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlength(c())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n:::\n\n### Coerción de elementos\n\nPuesto que los elementos de un vector tienen que ser del mismo tipo, cuando se crea un vector con datos de distintos tipos, la función `c()` los convertirá al mismo tipo, lo que se conoce como _coerción_ de tipos. La coerción se produce de los tipos menos flexibles a los más flexibles: `logical` < `integer` < `double` < `character`.\n\n:::{#exm-coercion}\nA continuación se muestran varios ejemplos de coerciones.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-5_3608fff8e503341043e180dfa855b7da'}\n\n```{.r .cell-code}\nc(1, 2.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.0 2.5\n```\n:::\n\n```{.r .cell-code}\nc(FALSE, TRUE, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2\n```\n:::\n\n```{.r .cell-code}\nc(FALSE, TRUE, 2, \"tres\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"FALSE\" \"TRUE\"  \"2\"     \"tres\" \n```\n:::\n:::\n\n\n:::\n\n### Acceso a los elementos de un vector\n\nPara acceder a los elementos de un vector se utiliza un índice. Como veremos a continuación, este índice puede ser entero, lógico o de cadena de caracteres y se indica siempre entre corchetes `[ ]` a continuación del vector. \n\n#### Acceso mediante un índice entero\n\nLos elementos de un vector están ordenados y el acceso más simple a ellos es mediante su número de orden, es decir, indicando entre corchetes `[ ]` el entero que corresponde a su número de orden. Se puede acceder simultáneamente a varios elementos mediante un vector con sus números de orden. Por otro lado, también es posible usar enteros negativos y en tal caso se obtendrán todos los elementos del vector excepto los que ocupan las posiciones correspondientes al valor absoluto de los índices negativos. Esta es la forma más habitual de eliminar elementos de un vector.\n\n:::{.callout-warning}\nEn R los índices enteros para acceder a los elementos de un vector comienzan en 1, a diferencia de otros lenguajes de programación que empiezan en 0.\n:::\n\n:::{#exm-acceso-vector}\nA continuación se muestran varios ejemplos de acceso a los elementos de un vector mediante índices enteros.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-6_addd7e2567cb648639f082cf96d5c006'}\n\n```{.r .cell-code}\nx <- c(2,4,6,8,10)\n# Acceso al elemento que está en la tercera posición\nx[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n# Acceso a los elementos de las posiciones 2 y 4\nx[c(2, 4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 8\n```\n:::\n\n```{.r .cell-code}\n# Acceso a los elementos de la posición 2 a la 4\nx[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 6 8\n```\n:::\n\n```{.r .cell-code}\n# Acceso a todos los elementos excepto el primero y el cuarto\nx[c(-1, -4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  6 10\n```\n:::\n:::\n\n\n:::\n\n#### Acceso mediante un índice lógico\n\nCuando se utiliza un índice lógico, se obtienen los elementos correspondientes a las posiciones donde está el valor booleano `TRUE`.\n\n:::{#exm-acceso-vector-indice-logico}\nA continuación se muestran varios ejemplos de acceso a los elementos de un vector mediante índices lógicos.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-7_8108a32d6f510eacc5574b96edfeb94a'}\n\n```{.r .cell-code}\nx <- c(2,4,6,8,10)\n# Acceso al elemento que está en la tercera posición\nx[c(F,F,T,F,F)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n# Acceso a los elementos de las posiciones 2 y 4\nx[c(F,T,F,T,F)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 8\n```\n:::\n:::\n\n\n:::\n\nEsta forma de acceder es útil cuando se genera el vector de índices mediante operadores relacionales. Cuando se aplica un operador relacional a un vector se obtiene otro vector lógico que resulta de aplicar el operador relacional a cada uno de los elementos del vector. De esta manera se puede realizar filtros para obtener los elementos de un vector que cumplen una determinada condición. \n\n:::{#exm-filtros}\nA continuación se muestran varios ejemplos de acceso a los elementos de un vector mediante condiciones.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-8_d732e012eccfb2108b0671a99f041c77'}\n\n```{.r .cell-code}\nx <- 1:6\nx %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# Filtrado de los valores pares\nx[x %% 2 == 0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n\n```{.r .cell-code}\n# Filtrado de los valores pares menores que 5\nx[x %% 2 == 0 & x < 5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4\n```\n:::\n:::\n\n\n:::\n\n#### Acceso mediante un índice de cadena\n\nSi los elementos de un vector tienen nombre, es posible acceder a ellos usando sus nombres como índices.\n\n:::{#exm-acceso-vector-nombres}\nA continuación se muestran varios ejemplos de acceso a los elementos de un vector mediante índices de cadena.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-9_250707eed6325f9284b40c1ec9f92ad5'}\n\n```{.r .cell-code}\nnotas <- c(\"Matemáticas\" = 8.2, \"Física\" = 6.5, \"Economía\" = 4.5)\nnotas[\"Física\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFísica \n   6.5 \n```\n:::\n\n```{.r .cell-code}\nnotas[c(\"Matemáticas\", \"Economía\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatemáticas    Economía \n        8.2         4.5 \n```\n:::\n:::\n\n\n:::\n\n### Pertenencia a un vector\n\nPara comprobar si un valor en particular es un elemento de un vector se puede utilizar el operador `%in%`:\n\n- `x %in% y`: Devuelve el booleano `TRUE` si `x` es un elemento del vector `y`, y `FALSE` en caso contrario.\n\n:::{#exm-pertenencia-vector}\nA continuación se muestran varios ejemplos de pertenencia de elementos a un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-10_5860cae53b5fd8d702936fb23dfa617d'}\n\n```{.r .cell-code}\nx <- 1:3\n2 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n### Modificación de los elementos de un vector\n\nPara modificar uno o varios elementos de un vector basta con acceder a esos elementos y usar el operador de asignación para asignar nuevos valores.\n\n:::{#exm-modificacion-vectores}\nA continuación se muestran varios ejemplos de modificación de los elementos de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-11_6a57ffa0a5ad96f3f5760bc44ffdf65c'}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\nx[2] <- 0\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 3\n```\n:::\n\n```{.r .cell-code}\nx[c(1, 3)] <- 1\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 1\n```\n:::\n:::\n\n\n:::\n\n### Añadir elementos a un vector \n\nPara añadir nuevos elementos a un vector pueden usarse las siguientes funciones:\n\n- `c(x, y)`: Devuelve el vector que resulta de añadir al vector `x` los elementos del vector `y`.\n- `append(x, y, pos)`: Devuelve el vector que resulta de añadir al vector `x` los elementos del vector `y`, a continuación de la posición `pos`. El parámetro `pos` es opcional y si no se indica, los elementos de `y` se añaden al final de los de `x`.\n\n:::{#exm-añadir-elementos-vector}\nA continuación se muestran varios ejemplos de añadir nuevos elementos a un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-12_19e383214b3ac080d2ad0bc8fa4b3f74'}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\nc(x, c(4, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nappend(x, c(4, 5), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4 5 3\n```\n:::\n:::\n\n\n:::\n\n### Eliminar elementos de un vector\n\nPara eliminar los elementos que ocupan una determinada posición se utiliza el operador de acceso, es decir, los corchetes `[ ]` pero con los índices correspondientes a las posiciones a eliminar, en negativo.\n\n:::{#exm-eliminar-elementos-vector}\nA continuación se muestran varios ejemplos de eliminar elementos de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-13_08d5367f2072f00f47e4985f92c2593a'}\n\n```{.r .cell-code}\nx <- c(\"a\", \"b\", \"c\", \"d\", \"e\")\nx[-3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"d\" \"e\"\n```\n:::\n\n```{.r .cell-code}\nx[-c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"c\" \"e\"\n```\n:::\n:::\n\n\n:::\n\n### Eliminación de un vector \n\nPara eliminar los elementos de un vector basta con asignar `NULL` a la variable que lo contiene, pero si se quiere liberar la memoria que ocupa la variable se utiliza la función `rm()`.\n\n### Operaciones aritméticas con vectores\n\n#### Operaciones aritméticas elemento a elemento\n\nPara vectores numéricos las operaciones aritméticas habituales se aplican elemento a elemento. Si los vectores tienen distinto tamaño, el tamaño del vector más pequeño se equipara al tamaño del mayor, reutilizando sus elementos, empezando por el primero.\n\n:::{#exm-operaciones-aritmeticas-vectores}\nA continuación se muestran varios ejemplos de operaciones aritméticas con vectores numéricos. \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-14_b16ff1b45d22143ceb6edddb54e2c18e'}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\ny <- c(0, 1, -1)\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2\n```\n:::\n\n```{.r .cell-code}\nx * y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0  2 -3\n```\n:::\n\n```{.r .cell-code}\nx / y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf   2  -3\n```\n:::\n\n```{.r .cell-code}\nx ^ y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.0000000 2.0000000 0.3333333\n```\n:::\n:::\n\n\n:::\n\n#### Producto escalar de vectores\n\nPara calcular el producto escalar de dos vectores numéricos se utiliza el operador `%*%`. Si los vectores tienen distinto tamaño se produce un error.\n\n:::{#exm-producto-escalar}\nA continuación se muestra un ejemplo del producto escalar de dos vectores.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-15_d8a0f49b2cf5eb9b5a44da1601510336'}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\ny <- c(0, 1, -1)\nx %*% y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]   -1\n```\n:::\n:::\n\n\n:::\n\n## Factores\n\n### Operaciones con factores\n\nUn factor es una estructura de datos especial que se utiliza para representar categorías de variables cualitativas y por tanto puede tomar un conjunto finito de valores predefinidos conocido como _niveles_ del factor.\n\nPara definir un factor se utiliza la siguiente función:\n\n- `factor(x, levels = niveles)`: Crea un dato de tipo factor con los elementos del vector `x`. Los niveles del factor pueden indicarse mediante el parámetro `levels`, pasándole un vector con los valores posibles. Si no se indica el parámetro `levels` los niveles del factor se obtienen automáticamente a partir de los elementos del vector `x` (tantos niveles con valores distintos tenga).\n\nLos factores son en realidad vectores de números enteros a los que se le añade un atributo especial para indicar los niveles del factor.\n\n:::{#exm-creacion-factores}\nA continuación se muestran varios ejemplos de creación de factores.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-16_47f1e96f3251334453f8e731dbb49f68'}\n\n```{.r .cell-code}\nsexo <- factor(c(\"mujer\", \"hombre\", \"mujer\"))\nsexo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] mujer  hombre mujer \nLevels: hombre mujer\n```\n:::\n\n```{.r .cell-code}\nclass(sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nstr(sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"hombre\",\"mujer\": 2 1 2\n```\n:::\n\n```{.r .cell-code}\ngrupo.sanguineo <- factor(c(\"B\", \"A\", \"A\"), levels = c(\"A\", \"B\", \"AB\", \"0\"), )\ngrupo.sanguineo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] B A A\nLevels: A B AB 0\n```\n:::\n:::\n\n\n:::\n\nEs posible establecer un orden entre los niveles de un factor añadiendo el parámetro `ordered = TRUE` a la función anterior. Esto es útil para representar categorías ordinales entre las que existe un orden natural.\n\n:::{#exm-creacion-factor-ordenado}\nA continuación se muestra un ejemplo de creación de un factor ordenado.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-17_7288a64423fa878b9b2976a74b3d0712'}\n\n```{.r .cell-code}\nnivel.estudio <- factor(c(\"Secundarios\", \"Graduado\", \"Bachiller\"), levels = c(\"Sin estudios\", \"Primarios\", \"Secundarios\", \"Bachiller\", \"Graduado\"), ordered = TRUE)\nnivel.estudio\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Secundarios Graduado    Bachiller  \nLevels: Sin estudios < Primarios < Secundarios < Bachiller < Graduado\n```\n:::\n:::\n\n\n:::\n\nPara comprobar si una estructura es del tipo factor se utiliza la siguiente función:\n\n- `is.factor(x)`: Devuelve el booleano `TRUE` si `x` es del tipo factor, y `FALSE` en caso contrario.\n\n### Acceso a los elementos de un factor\n\nSe puede acceder a los elementos de un factor de la misma manera que se accede a los elementos de un vector. Y para obtener sus niveles se utiliza la siguiente función:\n\n- `levels(x)`: Devuelve un vector con los niveles del factor `x`.\n\n:::{#exm-niveles-factor}\nA continuación se muestran varios ejemplos de acceso a los elementos y los niveles de un factor.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-18_7e80d50b2e5751068c4cfb63c4d3fe09'}\n\n```{.r .cell-code}\nsexo <- factor(c(\"mujer\", \"hombre\", \"mujer\"))\nsexo[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] hombre\nLevels: hombre mujer\n```\n:::\n\n```{.r .cell-code}\nsexo[c(1, 2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] mujer  hombre\nLevels: hombre mujer\n```\n:::\n\n```{.r .cell-code}\nsexo[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] mujer mujer\nLevels: hombre mujer\n```\n:::\n\n```{.r .cell-code}\nlevels(sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hombre\" \"mujer\" \n```\n:::\n:::\n\n\n:::\n\n### Modificación de los elementos de un factor\n\nSe puede modificar los elementos de un factor de manera similar a como se modifican los elementos de un vector, es decir accediendo al elemento que se quiere modificar y asignándole un nuevo valor. La única diferencia con los vectores es que si el nuevo valor que se quiere asignar no está entre los niveles del factor, se obtiene el valor `NA`.\n\n:::{#exm-modificacion-factor}\nA continuación se muestran varios de modificación de los elementos de un factor.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-19_cf78ac67d4c261d17ba77427c692a86f'}\n\n```{.r .cell-code}\ngrupo.sanguineo <- factor(c(\"B\", \"A\", \"A\"), levels = c(\"A\", \"B\", \"AB\", \"0\"))\ngrupo.sanguineo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] B A A\nLevels: A B AB 0\n```\n:::\n\n```{.r .cell-code}\ngrupo.sanguineo[2] <- \"AB\"\ngrupo.sanguineo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] B  AB A \nLevels: A B AB 0\n```\n:::\n\n```{.r .cell-code}\ngrupo.sanguineo[1] <- \"C\"\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in `[<-.factor`(`*tmp*`, 1, value = \"C\"): invalid factor level, NA\ngenerated\n```\n:::\n\n```{.r .cell-code}\ngrupo.sanguineo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] <NA> AB   A   \nLevels: A B AB 0\n```\n:::\n:::\n\n\n:::\n\nObsérvese en el ejemplo anterior que cuando se intenta asignar un valor a un factor que no está entre sus niveles, se produce un error.\n\n## Listas\n\nLas listas son colecciones ordenadas de elementos que pueden ser de distintos tipos. Los elementos de una lista también pueden ser de tipos estructurados (vectores o listas), lo que las convierte en el tipo de dato más versátil de R. Como veremos más adelante, otras estructuras de datos como los _data frames_ o los propios modelos estadísticos se construyen usando listas.\n\n### Creación de listas\n\nPara construir una lista se utiliza la función `list()`:\n\n- `list(x1, x2, ...)`: Devuelve la lista con los elementos `x1`, `x2`, etc.\n\n:::{#exm-creacion-listas}\nA continuación se muestran varios ejemplos de creación de listas.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-20_e4a57320b81bcddcf38cafa0c1cce40b'}\n\n```{.r .cell-code}\nlist(1, \"dos\", TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"dos\"\n\n[[3]]\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Lista con vectores y listas\nx <- list(1, c(\"dos\", \"tres\"), list(4, \"cinco\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"dos\"  \"tres\"\n\n[[3]]\n[[3]][[1]]\n[1] 4\n\n[[3]][[2]]\n[1] \"cinco\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : num 1\n $ : chr [1:2] \"dos\" \"tres\"\n $ :List of 2\n  ..$ : num 4\n  ..$ : chr \"cinco\"\n```\n:::\n\n```{.r .cell-code}\n# Lista vacía\nlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n:::\n\n\n:::\n\n#### Listas con nombres\n\nAl igual que con los vectores, es posible asignar un nombre a cada uno de los elementos de una lista.\n\n:::{#exm-creacion-listas-nombres}\nA continuación se muestra un ejemplo de creación de una lista con nombres.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-21_0251c82e18b248b7e04979be034b9929'}\n\n```{.r .cell-code}\nlist(\"nombre\" = \"María\", \"edad\" = 21, \"dirección\" = list(\"calle\" = \"Delicias\", \"número\" = 24, \"municipio\" = \"Madrid\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nombre\n[1] \"María\"\n\n$edad\n[1] 21\n\n$dirección\n$dirección$calle\n[1] \"Delicias\"\n\n$dirección$número\n[1] 24\n\n$dirección$municipio\n[1] \"Madrid\"\n```\n:::\n:::\n\n\n:::\n\nPara obtener los nombres de una lista se utiliza la siguiente función:\n\n- `names(x)`: Devuelve un vector de cadenas de caracteres con los nombres de los elementos de la lista `x`.\n\n:::{#exm-acceso-listas}\nA continuación se muestra un ejemplo de acceso a los nombres de una lista.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-22_b7439eccf0c35a8329032124af851087'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21, \"dirección\" = list(\"calle\" = \"Delicias\", \"número\" = 24, \"municipio\" = \"Madrid\"))\nnames(persona)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"nombre\"    \"edad\"      \"dirección\"\n```\n:::\n:::\n\n\n:::\n\n### Tamaño de una lista\n\nEl número de elementos de una lista es su _tamaño_ y puede averiguarse con la siguiente función:\n\n- `lenght(x)`: Devuelve el número de elementos de la lista `x`.\n\n:::{#exm-tamaño-lista}\nA continuación se muestran varios ejemplos la obtención del tamaño de una lista.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-23_5967614a1a3ce5acf84c50f757e8664f'}\n\n```{.r .cell-code}\nlength(list(1, \"dos\", TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlength(list(1, c(\"dos\", \"tres\"), list(4, \"cinco\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlength(list())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n:::\n\n### Acceso a los elementos de una lista\n\nSe accede a los elementos de una lista de forma similar a los vectores, mediante índices enteros, lógicos o de cadena, entre corchetes `[ ]`.\n\n#### Acceso mediante un índice entero\n\nAl igual que los vectores, los elementos de una lista están ordenados y se puede utilizar un índice entero para acceder a los elementos que ocupan una determinada posición.\n\n:::{#exm-}\nA continuación se muestran varios ejemplos de acceso a los elementos de una lista mediante índices enteros.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-24_b56e6213db3a8acd89d2b7c1d3df1079'}\n\n```{.r .cell-code}\nx <- list(1, \"dos\", TRUE, 4.5)\n# Acceso al elemento que está en la segunda posición\nx[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"dos\"\n```\n:::\n\n```{.r .cell-code}\n# Acceso a los elementos de las posiciones 1 y 3\nx[c(1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Acceso a todos los elementos excepto el primero y el cuarto\nx[c(-1, -4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"dos\"\n\n[[2]]\n[1] TRUE\n```\n:::\n:::\n\n\n:::\n\n#### Acceso mediante un índice lógico\n\nCuando se utiliza un índice lógico, se obtienen los elementos correspondientes a las posiciones donde está el valor booleano `TRUE`.\n\n:::{#exm-acceso-listas-logico}\nA continuación se muestran varios ejemplos de acceso a los elementos de una lista mediante índices lógicos.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-25_886c8111e69249ee5ec1b35d313a4aa3'}\n\n```{.r .cell-code}\nx <- list(1, \"dos\", TRUE, 4.5)\nx[c(T,F,F,T)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4.5\n```\n:::\n\n```{.r .cell-code}\nx < 2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introducidos por coerción\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE    NA  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n# Filtrado de valores menores que 2\nx[x < 2]\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introducidos por coerción\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\nNULL\n\n[[3]]\n[1] TRUE\n```\n:::\n:::\n\n\nObsérvese que para los elementos que no tiene sentido la comparación se obtiene `NA`, y que el acceso mediante este índice devuelve `NULL`.\n:::\n\n#### Acceso mediante nombres\n\nSi los elementos de una lista tienen nombre, se puede acceder a ellos utilizando sus nombres como índices. La única diferencia con el acceso mediante cadenas de vectores es que se obtiene siempre una lista, incluso cuando sólo se quiere acceder a un elemento. Para obtener un elemento, y no una lista con ese único elemento, se utilizan dobles corchetes `[[ ]]`.\n\n:::{#exm-acceso-listas-nombres}\nA continuación se muestran varios ejemplos de acceso a los elementos de una lista mediante índices de cadena.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-26_fb73e799f84a7234c7292e6718bbd460'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21, \"dirección\" = list(\"calle\" = \"Delicias\", \"número\" = 24, \"municipio\" = \"Madrid\"))\npersona[c(\"edad\", \"nombre\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$edad\n[1] 21\n\n$nombre\n[1] \"María\"\n```\n:::\n\n```{.r .cell-code}\npersona[\"nombre\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nombre\n[1] \"María\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(persona[\"nombre\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\n# Acceso a un único elemento\npersona[[\"nombre\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"María\"\n```\n:::\n\n```{.r .cell-code}\n# Acceso a una lista anidada\npersona[[\"dirección\"]][[\"municipio\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Madrid\"\n```\n:::\n:::\n\n\n:::\n\nUna alternativa a los dobles corchetes es el operador de acceso a listas `$`. Este operador además permite utilizar coincidencias parciales en los nombres de los elementos para acceder a ellos.\n\n:::{#exm-acceso-listas-nombres-$}\nA continuación se muestran varios ejemplos de acceso a los elementos de una lista mediante el operador `$`.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-27_7478d6082cd19041dfc153e98d51d007'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21, \"dirección\" = list(\"calle\" = \"Delicias\", \"número\" = 24, \"municipio\" = \"Madrid\"))\n# Acceso a un único elemento\npersona$nombre\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"María\"\n```\n:::\n\n```{.r .cell-code}\n# Acceso mediante coincidencia parcial\npersona$nom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"María\"\n```\n:::\n\n```{.r .cell-code}\n# Acceso a una lista anidada\npersona$dirección$municipio\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Madrid\"\n```\n:::\n:::\n\n\n:::\n\n### Modificación de los elementos de una lista\n\nPara modificar uno o varios elementos de una lista basta con acceder a esos elementos y reasignarles valores con el operador de asignación.\n\n:::{#exm-modificacion-listas}\nA continuación se muestran varios ejemplos de modificación de los elementos de una lista.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-28_4acb42f2c4fe967806c942669a678417'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21)\npersona$edad <- 22\npersona\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nombre\n[1] \"María\"\n\n$edad\n[1] 22\n```\n:::\n:::\n\n\n:::\n\n### Añadir elementos a una lista \n\nLa forma más sencilla de añadir un elemento con nombre a una lista es indicando el nombre con el operador `$` y asignándole un valor con el operador de asignación `<-`:\n\n- `x$nombre <- y`: Añade el elemento `y` a la lista `x` con el nombre `nombre`. \n\nEl nuevo elemento se añade siempre al final de la lista.\n\nPara añadir elementos sin nombre o en una posición determinada se puede utilizar la función `append()`:\n\n- `append(x, y, pos)`: Devuelve la lista vector que resulta de añadir a `x` los elementos de la lista `y`, a continuación de la posición `pos`. El parámetro `pos` es opcional y si no se indica, los elementos de `y` se añaden al final de los de `x`.\n\n:::{#exm-añadir-elementos-listas}\nA continuación se muestran varios ejemplos de añadir nuevos elementos a una lista.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-29_de8b92359e7ec9353b7613f71c2785c6'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21)\npersona$email <- \"maria@ceu.es\"\npersona\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nombre\n[1] \"María\"\n\n$edad\n[1] 21\n\n$email\n[1] \"maria@ceu.es\"\n```\n:::\n\n```{.r .cell-code}\nappend(persona, list(\"sexo\" = \"Mujer\"), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nombre\n[1] \"María\"\n\n$edad\n[1] 21\n\n$sexo\n[1] \"Mujer\"\n\n$email\n[1] \"maria@ceu.es\"\n```\n:::\n:::\n\n\n:::\n\n### Conversión de una lista en un vector\n\nEs posible convertir una lista en un vector con la siguiente función:\n\n- `unlist(x)`: Devuelve el vector que resulta de aplanar recursivamente la lista `x` y convertir todos los elementos al mismo tipo mediante coerción de tipos.\n\n:::{#exm-aplanar-lista}\nA continuación se muestran varios ejemplos de conversión de una lista en un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-30_3ea5c6539b06621a173f7403b4329a47'}\n\n```{.r .cell-code}\npersona <- list(\"nombre\" = \"María\", \"edad\" = 21, \"dirección\" = list(\"calle\" = \"Delicias\", \"número\" = 24, \"municipio\" = \"Madrid\"))\nunlist(persona)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             nombre                edad     dirección.calle    dirección.número \n            \"María\"                \"21\"          \"Delicias\"                \"24\" \ndirección.municipio \n           \"Madrid\" \n```\n:::\n\n```{.r .cell-code}\ntypeof(unlist(persona))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n:::\n\n:::{.callout-warning}\nObsérvese que cuando se convierte una lista en un vector, los elementos de la lista se convierten al tipo más general mediante coerción.\n:::\n\n## Matrices\n\nUna matriz es una estructura de datos bidimensional de elementos del mismo tipo organizados en filas y columnas. Una matriz es similar a un vector pero contiene una atributo adicional con sus dimensiones (número de filas y número de columnas).\n\n### Creación de matrices\n\nPara crear una matriz se utiliza la siguiente función:\n\n- `matrix(x, nrow = m, ncol = n)`: Devuelve la matriz con los elementos del vector `x` organizados en `n` filas y `m` columnas. Habitualmente basta con especificar el número de filas o el número de columnas.\n\n:::{#exm-creacion-matrices}\nA continuación se muestran varios ejemplos de creación de matrices.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-31_3a78ce1258c2f1913a22d8500f77319c'}\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2, ncol = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, ncol = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\n# La matriz de 1 x 1 \nmatrix()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]   NA\n```\n:::\n:::\n\n\n:::\n\nComo se puede observar en el ejemplo anterior, los elementos se disponen por columnas, pero se pueden disponer los elementos por filas pasando el parámetro `byrow = TRUE` a la función `matrix`.\n\n:::{#exm-creacion-matrices-por-filas}\nA continuación se muestran varios ejemplos de creación de matrices.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-32_8b99eff96085ef3240350dbcc48cde9f'}\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n:::\n:::\n\n\n:::\n\n#### Matrices con nombres de filas y columnas\n\nEs posible poner nombres a las filas y a las columnas de una matriz añadiendo el parámetro `dimnames` y pasándole una lista de dos vectores de cadenas con los nombres de las filas y las columnas respectivamente.\n\n:::{#exm-creacion-matrices-con-nombres}\nA continuación se muestran varios ejemplos de creación de matrices con nombres de filas y columnas.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-33_f1d7ef900ef6ee19803ac997f4b15f31'}\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2, ncol = 3, dimnames = list(c(\"fila1\", \"fila2\"), c(\"columna1\", \"columna2\", \"columna3\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      columna1 columna2 columna3\nfila1        1        3        5\nfila2        2        4        6\n```\n:::\n:::\n\n\n:::\n\nPara obtener los nombres de las filas y las columnas de una matriz se utilizan las siguientes funciones:\n\n- `rownames(x)`: Devuelve un vector de cadenas de caracteres con los nombres de las filas de la matriz `x`.\n- `colnames(x)`: Devuelve un vector de cadenas de caracteres con los nombres de las columnas de la matriz `x`.\n\n:::{#exm-obtencion-nombres-matriz}\nA continuación se muestran varios ejemplos de obtención de los nombres de las filas y columnas de una matriz con nombres.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-34_4f33b476cac75a8e1f346e7a81df2752'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 2, ncol = 3, dimnames = list(c(\"fila1\", \"fila2\"), c(\"columna1\", \"columna2\", \"columna3\")))\nrownames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"fila1\" \"fila2\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"columna1\" \"columna2\" \"columna3\"\n```\n:::\n:::\n\n\n:::\n\n### Tamaño y dimensiones de una matriz\n\nPara obtener el número de elementos y las dimensiones de una matriz se pueden utilizar las siguientes funciones:\n\n- `length(x)`: Devuelve un entero con el número de elementos de la matriz `x`.\n- `nrow(x)`: Devuelve un entero con el número de filas de la matriz `x`.\n- `ncol(x)`: Devuelve un entero con el número de columnas de la matriz `x`.\n- `dim(x)`: Devuelve un vector de dos enteros con el número de filas y el número de columnas de la matriz `x`.\n\n:::{#exm-dimensiones-matriz}\nA continuación se muestran varios ejemplos de acceso a las dimensiones de una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-35_b942ba92ae213439a6db2e0a7eb80f83'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 2)\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nnrow(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nncol(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n\n:::\n\nUsando esta última función se pueden modificar las dimensiones de una matriz asignando un vector de dos enteros con las nuevas dimensiones. Esto también permite crear una matriz a partir de un vector.\n\n:::{#exm-modificacion-dimensiones-matriz}\nA continuación se muestran varios ejemplos de modificación de las dimensiones de una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-36_d30b62d4712c41c35168ca10b50331b8'}\n\n```{.r .cell-code}\nx <- 1:6\ndim(x) <- c(2, 3)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\ndim(x) <- c(3, 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n:::\n\n\n:::\n\n### Acceso a los elementos de una matriz\n\nPara acceder a los elementos de una matriz se utilizan dos índices (uno para las filas y otro para las columnas), separados por comas y entre corchetes `[]` a continuación de la matriz. Al igual que para los vectores, los índices pueden ser enteros, lógicos o de cadenas de caracteres.\n\n#### Acceso mediante índices enteros\n\nPara acceder a los elementos de una matriz mediante índices enteros se indica el número de fila y el número de columna del elemento entre corchetes:\n\n- `x[i,j]`: Devuelve el elemento de la matriz `x` que está en la fila `i` y la columna `j`.\n\nSe puede acceder a más de un elemento indicando un vector de enteros para las filas y otro para las columnas. De esta manera se obtiene una submatriz. Si no se indica la fila o la columna se obtienen todos los elementos de todas las filas o columnas. Al igual que para vectores, se pueden utilizar enteros negativos para descartar filas o columnas\n\n:::{#exm-acceso-matriz}\nA continuación se muestran varios ejemplos de acceso a los elementos de una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-37_a51ad3dcab149c027f4ecec33febe6d8'}\n\n```{.r .cell-code}\nx <- matrix(1:9, nrow = 3)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\n# Acceso al elemento de la segunda fila y tercera columna\nx[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la submatriz de la primera y tercera filas, y tercera y segunda columnas\nx[c(1, 3), c(3, 2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    7    4\n[2,]    9    6\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la primera fila\nx[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 7\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la segunda columna\nx[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la submatriz con todos los elementos salvo la tercera fila y la segunda columna\nx[-3, -2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    7\n[2,]    2    8\n```\n:::\n:::\n\n\n:::\n\n#### Acceso mediante índices lógicos\n\nCuando se utilizan índices lógicos, se obtienen los elementos correspondientes a las filas y columnas donde está el valor booleano `TRUE`.\n\n:::{#exm-acceso-matriz-logico}\nA continuación se muestran varios ejemplos de acceso a los elementos de una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-38_d2d44c9cc1aab4402523dcd6091100a9'}\n\n```{.r .cell-code}\nx <- matrix(1:9, nrow = 3)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\n# Acceso al elemento de la segunda fila y tercera columna\nx[c(F, T, F), c(F, F, T)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la submatriz de la primera y tercera filas, y segunda y tercera columnas\nx[c(T, F, T), c(F, T, T)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    4    7\n[2,]    6    9\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la primera fila\nx[c(T, F, F), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 7\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la segunda columna\nx[, c(F, T, F)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n:::\n\n\n:::\n\n#### Acceso mediante índices de cadena\n\nSi las filas y las columnas de una matriz tienen nombre, es posible acceder a sus elementos usando los nombres de las filas y columnas como índices.\n\n:::{#exm-acceso-matriz-nombres} \nA continuación se muestran varios ejemplos de acceso a los elementos de una matriz mediante los nombres de sus filas y columnas.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-39_7e2cda6062d7358034e6ce4fafed9582'}\n\n```{.r .cell-code}\nx <- matrix(1:9, nrow = 3, dimnames = list(c(\"f1\", \"f2\", \"f3\"), c(\"c1\", \"c2\", \"c3\")))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nf1  1  4  7\nf2  2  5  8\nf3  3  6  9\n```\n:::\n\n```{.r .cell-code}\n# Acceso al elemento de la segunda fila y tercera columna\nx[\"f2\", \"c3\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n# Acceso a la submatriz de la primera y tercera filas, y tercera y segunda columnas\nx[c(\"f1\", \"f3\"), c(\"c3\", \"c2\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c3 c2\nf1  7  4\nf3  9  6\n```\n:::\n:::\n\n\n:::\n\nFinalmente, es posible combinar distintos tipos de índices (enteros, lógicos o de cadena) para indicar las filas y las columnas a las que acceder.\n\n### Pertenencia a una matriz\n\nPara comprobar si un valor en particular es un elemento de una matriz se puede utilizar el operador `%in%`:\n\n- `x %in% y`: Devuelve el booleano `TRUE` si `x` es un elemento de la matriz `y`, y `FALSE` en caso contrario.\n\n:::{#exm-pertenencia-matriz}\nA continuación se muestran varios ejemplos de pertenencia de elementos a una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-40_0e0c105d3f3691309f837636121c2c80'}\n\n```{.r .cell-code}\nx <- matrix(1:9, nrow = 3)\n2 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n-1 %in% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n:::\n\n### Modificación de los elementos de una matriz\n\nPara modificar uno o varios elementos de una matriz basta con acceder a esos elementos y usar el operador de asignación para asignar nuevos valores.\n\n:::{#exm-modificacion-matriz}\nA continuación se muestran varios ejemplos de modificación de los elementos de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-41_80cf8dfaae75bedc2d93cbbdb5a1c7f3'}\n\n```{.r .cell-code}\nx <- matrix(1:9, nrow = 3)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\nx[2,3] <- 0\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    0\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\nx[c(1, 3), 1:2] <- -1\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   -1   -1    7\n[2,]    2    5    0\n[3,]   -1   -1    9\n```\n:::\n:::\n\n\n:::\n\n### Añadir elementos a una matriz\n\nPara añadir nuevas filas o columnas a una matriz se utilizan las siguientes funciones:\n\n- `rbind(x, y)`: Devuelve la matriz que resulta de añadir nuevas filas a la matriz `x` con los elementos del vector `y`.\n- `cbind(x, y)`: Devuelve la matriz que resulta de añadir nuevas columnas a la matriz `x` con los elementos del vector `y`.\n\n:::{#exm-añadir-filas-columnas-matriz}\nA continuación se muestran varios ejemplos de añadir nuevas filas y columnas a una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-42_bf4a81b4f1a8d1bbb0deac874309caba'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\n# Añadir una nueva fila\nrbind(x, c(7, 8, 9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n[3,]    7    8    9\n```\n:::\n\n```{.r .cell-code}\n# Añadir una nueva columna\ncbind(x, c(7, 8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n```\n:::\n:::\n\n\n:::\n\n:::{.callout-warning}\nObsérvese que si el número de elementos proporcionados en el vector es menor del necesario para completar la fila o columna, se reutilizan los elementos del vector empezando desde el principio.\n:::\n\n### Trasponer una matriz\n\nPara trasponer una matriz se utiliza la función siguiente:\n\n- `t(x)`: Devuelve la matriz traspuesta de la matriz `x`.\n\n\n:::{#exm-trasposicion-matriz}\nA continuación se muestran un ejemplo de la trasposición de una matriz.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-43_b75d1b96631c939c37ff95285532f454'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow=2)\nt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n:::\n:::\n\n\n:::\n\n### Operaciones aritméticas con matrices\n\n#### Operaciones aritméticas elemento a elemento\n\nPara matrices numéricas las operaciones aritméticas habituales se aplican elemento a elemento. Si las dimensiones de las matrices son distintas se produce un error.\n\n:::{#exm-operaciones-aritmeticas-matrices}\nA continuación se muestran varios ejemplos de operaciones aritméticas elemento a elemento con matrices numéricas.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-44_2a6feceb49b3cd12866475156208c6e7'}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\ny <- matrix(c(0, 1, 0, -1, 0, 1), nrow = 2)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    1   -1    1\n```\n:::\n\n```{.r .cell-code}\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    3    3    7\n```\n:::\n\n```{.r .cell-code}\nx * y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    2   -4    6\n```\n:::\n\n```{.r .cell-code}\nx / y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]  Inf  Inf  Inf\n[2,]    2   -4    6\n```\n:::\n\n```{.r .cell-code}\nx ^ y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1 1.00    1\n[2,]    2 0.25    6\n```\n:::\n:::\n\n\n:::\n\n:::{.callout-warning}\nObsérvese en el ejemplo anterior que la división por 0 produce el valor `Inf` que representa infinito.\n:::\n\n#### Multiplicación de matrices \n\nPara multiplicar dos matrices numéricas se utiliza el operador `%*%`.\n\n:::{#exm-producto-matrices}\nA continuación se muestran varios ejemplos del producto de dos matrices numéricas.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-45_9442493822a623a58c5720139a984af1'}\n\n```{.r .cell-code}\nx <- matrix(1:6, ncol = 3)\ny <- matrix(1:6, nrow = 3)\nx %*% y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   22   49\n[2,]   28   64\n```\n:::\n\n```{.r .cell-code}\ny %*% x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    9   19   29\n[2,]   12   26   40\n[3,]   15   33   51\n```\n:::\n:::\n\n\n:::\n\n:::{.callout-warning}\nPara poder multiplicar dos matrices deben tener dimensiones compatibles. Si el número de columnas de la primera matriz no es igual que el número de filas de la segunda se produce un error.\n:::\n\n### Determinante de una matriz\n\nPara calcular el determinante de una matriz numérica cuadrada se utiliza la siguiente función:\n\n- `det(x)`: Devuelve el determinante de la matriz `x`. Si `x` no es una matriz numérica cuadrada produce un error.\n\n:::{#exm-determinante}\nA continuación se muestra un ejemplo del cálculo del determinante de una matriz numérica cuadrada.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-46_5fad7e478e0f40ff98861e45f25ca493'}\n\n```{.r .cell-code}\nx <- matrix(1:4, ncol = 2)\ndet(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -2\n```\n:::\n:::\n\n\n:::\n\n### Inversa de una matriz\n\nPara calcular la matriz inversa de una matriz numérica cuadrada se utiliza la siguiente función:\n\n- `solve(x)`: Devuelve la matriz inversa de la matriz `x`. Si `x` no es una matriz numérica cuadrada produce un error. Si la matriz no es invertible por tener determinante nulo también se obtiene un error.\n\n:::{#exm-inversa-matriz}\nA continuación se muestra un ejemplo del cálculo del determinante de una matriz numérica cuadrada.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-47_fd9b7b559c792b254d7bc31be25f6509'}\n\n```{.r .cell-code}\nx <- matrix(1:4, nrow = 2)\nsolve(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n```\n:::\n\n```{.r .cell-code}\n# El producto de una matriz por su inversa es la matriz identidad.\nx %*% solve(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n```\n:::\n:::\n\n\n:::\n\n### Autovalores y autovectores de una matriz\n\nPara calcular los autovalores y los autovectores de una matriz numérica cuadrada se utiliza la siguiente función: \n\n- `eigen(x)`: Devuelve una lista con los autovalores y los autovectores de la matriz `x`. Para acceder a los autovalores se utiliza el nombre `values` y para acceder a los autovectores se utiliza el nombre `vectors`. \n\n:::{#exm-autovalores-autovectores}\nA continuación se muestra un ejemplo del cálculo los autovalores y los autovectores de una matriz numérica cuadrada. Si `x` no es una matriz numérica cuadrada produce un error.\n\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-48_822b0f75a9c71929d8e894815e79104f'}\n\n```{.r .cell-code}\nx <- matrix(1:4, nrow = 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n:::\n\n```{.r .cell-code}\n# Autovalores\neigen(x)$values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5.3722813 -0.3722813\n```\n:::\n\n```{.r .cell-code}\n# Autovectores\neigen(x)$vectors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]\n[1,] -0.5657675 -0.9093767\n[2,] -0.8245648  0.4159736\n```\n:::\n:::\n\n\n:::\n\n## Data frames\n\nUn _data frame_ es una estructura bidimensional cuyos elementos se organizan por filas y columnas de manera similar a una matriz. La principal diferencia con las matrices es que sus columnas están formadas por vectores, pero pueden tener tipos de datos distintos. Un data frame es un caso particular de lista formada por vectores del mismo tamaño con nombre. \n\nLos data frames son las estructuras de datos más utilizadas en R para almacenar los datos en los análisis estadísticos.\n\n### Creación de un data frame\n\nPara crear un data frame se utiliza la siguiente función:\n\n- `data.frame(nombrex = x, nombrey = y, ...)`: Devuelve el data frame con columnas los vectores `x`, `y`, etc. y nombres de columna `nombrex`, `nombrey`, etc.\n\n:::{#exm-creacion-data-frames}\nA continuación se muestran varios ejemplos de la creación de data frames.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-49_ce9fb88e46137ed69ce33a6bceb4254d'}\n\n```{.r .cell-code}\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  4.5\n```\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  2 variables:\n $ asignatura: chr  \"Matemáticas\" \"Física\" \"Economía\"\n $ nota      : num  8.5 7 4.5\n```\n:::\n\n```{.r .cell-code}\n# Data frame vacío\ndata.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata frame with 0 columns and 0 rows\n```\n:::\n:::\n\n\n:::\n\nPara grandes conjuntos de datos es más común crear un data frame a partir de un [fichero en formato csv](https://es.wikipedia.org/wiki/Valores_separados_por_comas) mediante la siguiente función:\n\n- `read.csv(f)`: Devuelve el data frame que se genera a partir de los datos del fichero csv `f`. Cada fila del fichero csv se corresponde con una fila del data frame y por defecto utiliza la coma `,` parara separar los datos de las columnas y punto `.` como separador de decimales de los datos numéricos. Los nombres de las columnas se obtienen automáticamente a partir de la primera fila del fichero.\n- `read.csv2(f)`: Funciona igual que la función anterior pero utiliza como separador de columnas el punto y coma `;` y como separador de decimales la coma `,`.\n\n:::{#exm-creacion-data-frame-csv}\nA continuación se muestra un ejemplo de creación de un data frame a partir de un fichero csv.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-50_e934dfa8d3623ae96181302a6880b456'}\n\n```{.r .cell-code}\ndf <- read.csv('https://raw.githubusercontent.com/asalber/manual-r/master/datos/colesterol.csv')\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2                   Rosa Díaz Díaz   32    M   65   1.73        232\n3            Javier García Sánchez   24    H   NA   1.81        191\n4              Carmen López Pinzón   35    M   65   1.70        200\n5             Marisa López Collado   46    M   51   1.58        148\n6                Antonio Ruiz Cruz   68    H   66   1.74        249\n7          Antonio Fernández Ocaña   51    H   62   1.72        276\n8            Pilar Martín González   22    M   60   1.66         NA\n9             Pedro Gálvez Tenorio   35    H   90   1.94        241\n10         Santiago Reillo Manzano   46    H   75   1.85        280\n11           Macarena Álvarez Luna   53    M   55   1.62        262\n12      José María de la Guía Sanz   58    H   78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n14           Carolina Rubio Moreno   20    M   61   1.77        194\n```\n:::\n:::\n\n\n:::\n\n### Coerción de otras estructuras de datos a data frames\n\nPara convertir otras estructuras de datos en data frames, se utiliza la siguiente función:\n\n- `as.data.frame(x)`: Devuelve el data frame que se obtiene a partir la estructura de datos `x` a plicanco las siguientes reglas de coerción:\n  - Si `x` es un vector se obtiene un data frame con una sola columna.\n  - Si `x` es una lista se obtiene un data frame con tantas columnas como elementos tenga la lista. Si los elementos de la lista tienen tamaños distintos se obtiene un error. \n  - Si `x` es una matriz se obtiene un data frame con el mismo número de columnas y filas que la matriz.\n\n### Acceso a los elementos de un data frame\n\nPuesto que un data frame es una lista, se puede acceder a sus elementos como se accede a los elementos de una lista utilizando índices. Con corchetes simples `[ ]` se obtiene siempre un data frame, mientras que con corchetes dobles `[[ ]]` o `$` se obtiene un vector. Pero también se puede acceder a los elementos de un data frame como si fuese una matriz, indicando un par de índices para las filas y las columnas respectivamente.\n\n:::{#exm-acceso-data-frame}\nA continuación se muestran varios ejemplos de acceso a los elementos de un data frame.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-51_313d0969103fbd712b506906f9668cb9'}\n\n```{.r .cell-code}\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  4.5\n```\n:::\n\n```{.r .cell-code}\n# Acceso como lista\ndf[\"asignatura\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura\n1 Matemáticas\n2      Física\n3    Economía\n```\n:::\n\n```{.r .cell-code}\ndf$asignatura\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Matemáticas\" \"Física\"      \"Economía\"   \n```\n:::\n\n```{.r .cell-code}\n# Acceso como matriz\ndf[2:3, \"nota\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.0 4.5\n```\n:::\n\n```{.r .cell-code}\ndf[df$nota >= 5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n```\n:::\n:::\n\n\n:::\n\nObsérvese en el último ejemplo anterior cómo se pueden utilizar condiciones lógicas para filtrar un data frame.\n\nPara acceder a las primeras o últimas filas de un data frame se pueden utilizar las siguientes funciones: \n\n- `head(df, n)`: Devuelve un data frame con las `n` primeras filas del data frame `df`.\n\n- `tail(df, n)`: Devuelve un data frame con las `n` últimas filas del data frame `df`.\n\nEstas funciones son útiles para darse una idea del contenido de un data frame con muchas filas.\n\n:::{#exm-acceso-primeras-ultimas-filas-data-frame}\nA continuación se muestran varios ejemplos de acceso a las primeras o últimas filas de un data frame.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-52_44e3d46521ee5e905b95251715870409'}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:26, y = letters) # letters es un vector predefinido con las letras del abecedario.\nhead(df, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 a\n2 2 b\n3 3 c\n```\n:::\n\n```{.r .cell-code}\ntail(df, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x y\n25 25 y\n26 26 z\n```\n:::\n:::\n\n\n:::\n\n### Modificación de los elementos de un data frame\n\nPara modificar uno o varios elementos de un data frame basta con acceder a esos elementos y usar el operador de asignación para asignar nuevos valores.\n\n:::{#exm-modificacion-data-frames}\nA continuación se muestran varios ejemplos de modificación de los elementos de un vector.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-53_3ce32a105084775d3467333693952511'}\n\n```{.r .cell-code}\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  4.5\n```\n:::\n\n```{.r .cell-code}\ndf[3, \"nota\"] <- 5\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  5.0\n```\n:::\n:::\n\n\n:::\n\n### Añadir elementos a un data frame\n\nPara añadir nuevas filas o columnas a una data frame se utilizan las mismas funciones que para matrices:\n\n- `rbind(df, x)`: Devuelve el data frame que resulta de añadir nuevas filas al data frame `df` con los elementos de la lista `x`.\n\n- `cbind(df, nombrex = x)`: Devuelve el data frame que resulta de añadir nuevas columnas al data frame `df` con los elementos del vector `x` con nombre `nombrex`.\n\n:::{#exm-añadir-filas-columnas-data-frame}\nA continuación se muestran varios ejemplos de añadir nuevas filas y columnas a un data frame.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-54_e348ed367a9cf6fdb4c4e3d36558dc38'}\n\n```{.r .cell-code}\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota\n1 Matemáticas  8.5\n2      Física  7.0\n3    Economía  4.5\n```\n:::\n\n```{.r .cell-code}\n# Añadir una nueva fila\nrbind(df, list(\"Programación\" , 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    asignatura nota\n1  Matemáticas  8.5\n2       Física  7.0\n3     Economía  4.5\n4 Programación 10.0\n```\n:::\n\n```{.r .cell-code}\n# Añadir una nueva columna\ncbind(df, créditos = c(6, 4, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota créditos\n1 Matemáticas  8.5        6\n2      Física  7.0        4\n3    Economía  4.5        3\n```\n:::\n:::\n\n\n:::\n\n### Eliminar filas y columnas de un data frame\n\nPara eliminar una columna de un data frame basta con acceder a la columna y asignarle el valor `NULL`, mientras que para eliminar una fila basta con acceder a la fila con índice negativo. \n\n:::{#exm-eliminacion-filas-columnas-data-frame}\nA continuación se muestran varios ejemplos de eliminación de filas y columnas de un data frame.\n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-55_638a4d808e85d029fc4caa9cdb023c61'}\n\n```{.r .cell-code}\ndf <- data.frame(asignatura = c(\"Matemáticas\", \"Física\", \"Economía\"), nota = c(8.5, 7, 4.5), créditos = c(6, 4, 3))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura nota créditos\n1 Matemáticas  8.5        6\n2      Física  7.0        4\n3    Economía  4.5        3\n```\n:::\n\n```{.r .cell-code}\n# Eliminar una columna\ndf$nota <- NULL\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura créditos\n1 Matemáticas        6\n2      Física        4\n3    Economía        3\n```\n:::\n\n```{.r .cell-code}\n# Eliminar una fila\ndf[-2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   asignatura créditos\n1 Matemáticas        6\n3    Economía        3\n```\n:::\n:::\n\n\n:::\n\n## Ejercicios\n\n:::{#exr-datos-estructurados-1}\nLa siguiente tabla recoge las notas de los alumnos de un curso con dos asignaturas. \n\n| Alumno | Sexo | Física | Química |\n|:-|:-:|:-:|:-:|\n| Carlos | H | 6.7 | 8.1 |\n| María | M | 7.2 | 9.5 |\n| Carmen | M | 5.5 | 5 |\n| Pedro | H |  | 4.5 |\n| Luis | H | 3.5 | 5 |\n| Sara | M | 6.2 | 4 |\n\na. Definir cuatro vectores con el nombre, el sexo y las notas de Física y Química.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-56_63bf8637099599a71093cb3df615c1b3'}\n\n```{.r .cell-code}\nnombre <- c(\"Carlos\", \"María\", \"Carmen\", \"Pedro\", \"Luis\", \"Sara\")\nsexo <- c(\"H\", \"M\", \"M\", \"H\", \"H\", \"M\")\nfisica <- c(6.7, 7.2, 5.5, NA, 3.5, 6.2)\nquimica <- c(8.1, 9.5, 5, 4.5, 5, 4)\n```\n:::\n\n\n:::\n\nb. Convertir el sexo en un factor y mostrar sus niveles.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-57_650b09642ade1dce7753470a450420bb'}\n\n```{.r .cell-code}\nsexo <- factor(sexo)\nlevels(sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"H\" \"M\"\n```\n:::\n:::\n\n\n:::\n\nc. Crear un nuevo vector con la nota media de Física y Química.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-58_c60bd1f526190c2d6318e153ff13d2e8'}\n\n```{.r .cell-code}\nmedia <- (fisica + quimica) / 2\nmedia\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.40 8.35 5.25   NA 4.25 5.10\n```\n:::\n:::\n\n\n:::\n\nd. Crear la variable booleana `aprobado` que tenga el valor `TRUE` si la media es mayor o igual que 5 y `FALSE` en caso contrario.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-59_2d382969b396f7a74c319c7139c9d0bd'}\n\n```{.r .cell-code}\naprobado <- media >= 5\naprobado\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE    NA FALSE  TRUE\n```\n:::\n:::\n\n\n:::\n\ne. Aplicar un filtro al vector de nombres para quedarse con los nombres de los alumnos que han aprobado.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-60_afecf98be2ed467e252dfd8c22570d26'}\n\n```{.r .cell-code}\nnombre[aprobado & !is.na(aprobado)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Carlos\" \"María\"  \"Carmen\" \"Sara\"  \n```\n:::\n:::\n\n\n:::\n\nf. Crear un data frame con el nombre, sexo y las notas de Física y Química.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-61_832b688a951dc147f30f69f0beadfeb7'}\n\n```{.r .cell-code}\ndf <- data.frame(nombre, sexo, fisica, quimica)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  nombre sexo fisica quimica\n1 Carlos    H    6.7     8.1\n2  María    M    7.2     9.5\n3 Carmen    M    5.5     5.0\n4  Pedro    H     NA     4.5\n5   Luis    H    3.5     5.0\n6   Sara    M    6.2     4.0\n```\n:::\n:::\n\n\n:::\n\ng. Añadir el vector con la media al data frame.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-62_cd36d9300edccfdf012f205605946727'}\n\n```{.r .cell-code}\ndf$media <- media\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  nombre sexo fisica quimica media\n1 Carlos    H    6.7     8.1  7.40\n2  María    M    7.2     9.5  8.35\n3 Carmen    M    5.5     5.0  5.25\n4  Pedro    H     NA     4.5    NA\n5   Luis    H    3.5     5.0  4.25\n6   Sara    M    6.2     4.0  5.10\n```\n:::\n:::\n\n\n:::\n\nh. Filtrar el data frame para quedarse con el nombre y la media de las mujeres que han aprobado.\n\n:::{.callout-note collapse=\"true\"}\n## Solución \n\n\n::: {.cell hash='03-tipos-datos-estructurados_cache/pdf/unnamed-chunk-63_0d0c889552619f60255a90eff799c9d7'}\n\n```{.r .cell-code}\ndf[sexo == \"M\" & media >= 5, c(\"nombre\", \"media\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  nombre media\n2  María  8.35\n3 Carmen  5.25\n6   Sara  5.10\n```\n:::\n:::\n\n\n:::\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}